// Generated by @wagmi/cli@1.0.0 on 04/07/2023 at 16:25:35
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Database
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const databaseABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collectionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'organisationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      },
      {
        name: 'collectionName',
        internalType: 'string',
        type: 'string',
        indexed: false
      },
      {
        name: 'collectionInfoFields',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false
      },
      {
        name: 'collectionInfoDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'collectionInfoValues',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false
      },
      {
        name: 'fieldNames',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false
      },
      {
        name: 'fieldDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false
      },
      { name: 'retired', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'update', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'CollectionCreatedOrUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'documentId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'organisationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'collectionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'fieldNames',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false
      },
      {
        name: 'fieldDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'fieldValues',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false
      },
      { name: 'retired', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'update', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'DocumentCreatedOrUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFeeCollectorAddress',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'FeeCollectorAddressUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'organisationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'organisationName',
        internalType: 'string',
        type: 'string',
        indexed: false
      },
      {
        name: 'organisationInfoFields',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false
      },
      {
        name: 'organisationInfoDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      },
      {
        name: 'organisationInfoValues',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false
      },
      { name: 'retired', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'update', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'OrganisationCreatedOrUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newCreationFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'collectionCreationFeeChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'organisationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'collectionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'status', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'collectionPublisherChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newUpdateFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'collectionUpdateFeeChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newCreationFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'documentCreationFeeChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newUpdateFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'documentUpdateFeeChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'organisationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'collectionId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'documentId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      {
        name: 'user',
        internalType: 'address',
        type: 'address',
        indexed: false
      },
      { name: 'status', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'documentUpdatorChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'organisationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      { name: 'status', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'orgAdminChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newCreationFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'orgCreationFeeChanged'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newUpdateFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'orgUpdateFeeChanged'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_orgCreationFee', internalType: 'uint256', type: 'uint256' },
      {
        name: '_collectionCreationFee',
        internalType: 'uint256',
        type: 'uint256'
      },
      { name: '_docCreationFee', internalType: 'uint256', type: 'uint256' },
      { name: '_orgUpdateFee', internalType: 'uint256', type: 'uint256' },
      {
        name: '_collectionUpdateFee',
        internalType: 'uint256',
        type: 'uint256'
      },
      { name: '_documentUpdateFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'changeAllFees',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_creationFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'changeCollectionCreationFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_updateFee', internalType: 'uint256', type: 'uint256' }],
    name: 'changeCollectionUpdateFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_creationFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'changeDocumentCreationFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_updateFee', internalType: 'uint256', type: 'uint256' }],
    name: 'changeDocumentUpdateFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_feeCollectorAddress',
        internalType: 'address payable',
        type: 'address'
      }
    ],
    name: 'changeFeeCollectorAddress',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_creationFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'changeOrgCreationFee',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_updateFee', internalType: 'uint256', type: 'uint256' }],
    name: 'changeOrgUpdateFee',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collectionCreationFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' }
    ],
    name: 'collectionPublishers',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'collectionUpdateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_collectionId', internalType: 'uint256', type: 'uint256' },
      { name: '_organisationId', internalType: 'uint256', type: 'uint256' },
      { name: '_collectionName', internalType: 'string', type: 'string' },
      {
        name: '_collectionInfoFields',
        internalType: 'string[]',
        type: 'string[]'
      },
      {
        name: '_collectionInfoDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]'
      },
      {
        name: '_collectionInfoValues',
        internalType: 'string[]',
        type: 'string[]'
      },
      { name: '_fieldNames', internalType: 'string[]', type: 'string[]' },
      { name: '_fieldDataTypes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_update', internalType: 'bool', type: 'bool' },
      { name: '_retired', internalType: 'bool', type: 'bool' }
    ],
    name: 'createOrUpdateCollection',
    outputs: [
      { name: 'collectionId', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_organisationId', internalType: 'uint256', type: 'uint256' },
      { name: '_organisationName', internalType: 'string', type: 'string' },
      {
        name: '_organisationInfoFields',
        internalType: 'string[]',
        type: 'string[]'
      },
      {
        name: '_organisationInfoDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]'
      },
      {
        name: '_organisationInfoValues',
        internalType: 'string[]',
        type: 'string[]'
      },
      { name: '_update', internalType: 'bool', type: 'bool' },
      { name: '_retired', internalType: 'bool', type: 'bool' }
    ],
    name: 'createOrUpdateOrganisation',
    outputs: [
      { name: 'organisationId', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_organisationName', internalType: 'string', type: 'string' },
      {
        name: '_organisationInfoFields',
        internalType: 'string[]',
        type: 'string[]'
      },
      {
        name: '_organisationInfoDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]'
      },
      {
        name: '_organisationInfoValues',
        internalType: 'string[]',
        type: 'string[]'
      },
      { name: '_collectionName', internalType: 'string', type: 'string' },
      {
        name: '_collectionInfoFields',
        internalType: 'string[]',
        type: 'string[]'
      },
      {
        name: '_collectionInfoDataTypes',
        internalType: 'uint256[]',
        type: 'uint256[]'
      },
      {
        name: '_collectionInfoValues',
        internalType: 'string[]',
        type: 'string[]'
      },
      { name: '_fieldNames', internalType: 'string[]', type: 'string[]' },
      { name: '_fieldDataTypes', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: 'collectionPublishers',
        internalType: 'address[]',
        type: 'address[]'
      }
    ],
    name: 'createOrganisationAndCollectionAndAddRoles',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'docCreationFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'documentUpdateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeCollectorAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFees',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'organisationId', internalType: 'uint256', type: 'uint256' },
      { name: 'collectionId', internalType: 'uint256', type: 'uint256' },
      { name: 'user', internalType: 'address', type: 'address' }
    ],
    name: 'isCollectionPublisher',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'organisationId', internalType: 'uint256', type: 'uint256' },
      { name: 'collectionId', internalType: 'uint256', type: 'uint256' },
      { name: 'documentId', internalType: 'uint256', type: 'uint256' },
      { name: 'user', internalType: 'address', type: 'address' }
    ],
    name: 'isDocumentUpdator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'organisationId', internalType: 'uint256', type: 'uint256' },
      { name: 'user', internalType: 'address', type: 'address' }
    ],
    name: 'isOrgAdmin',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' }
    ],
    name: 'orgAdmins',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'orgCreationFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'orgUpdateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_documentId', internalType: 'uint256', type: 'uint256' },
      { name: '_organisationId', internalType: 'uint256', type: 'uint256' },
      { name: '_collectionId', internalType: 'uint256', type: 'uint256' },
      { name: '_fieldNames', internalType: 'string[]', type: 'string[]' },
      { name: '_fieldDataTypes', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_fieldValues', internalType: 'string[]', type: 'string[]' },
      { name: '_update', internalType: 'bool', type: 'bool' },
      { name: '_retired', internalType: 'bool', type: 'bool' }
    ],
    name: 'publishOrUpdateDocument',
    outputs: [{ name: 'documentId', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'organisationId', internalType: 'uint256', type: 'uint256' },
      { name: 'collectionId', internalType: 'uint256', type: 'uint256' },
      { name: 'users', internalType: 'address[]', type: 'address[]' },
      { name: 'status', internalType: 'bool', type: 'bool' }
    ],
    name: 'updateCollectionPublishers',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'organisationId', internalType: 'uint256', type: 'uint256' },
      { name: 'collectionId', internalType: 'uint256', type: 'uint256' },
      { name: 'documentId', internalType: 'uint256', type: 'uint256' },
      { name: 'users', internalType: 'address[]', type: 'address[]' },
      { name: 'status', internalType: 'bool', type: 'bool' }
    ],
    name: 'updateDocumentUpdatorRole',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'organisationId', internalType: 'uint256', type: 'uint256' },
      { name: 'users', internalType: 'address[]', type: 'address[]' },
      { name: 'status', internalType: 'bool', type: 'bool' }
    ],
    name: 'updateOrgAdminRole',
    outputs: []
  }
] as const

export const databaseAddress =
  '0x73eC76dE95A350Ebce76a0EFfFde859B924FD15a' as const

export const databaseConfig = {
  address: databaseAddress,
  abi: databaseABI
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__.
 */
export function useDatabaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"collectionCreationFee"`.
 */
export function useDatabaseCollectionCreationFee<
  TFunctionName extends 'collectionCreationFee',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'collectionCreationFee',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"collectionPublishers"`.
 */
export function useDatabaseCollectionPublishers<
  TFunctionName extends 'collectionPublishers',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'collectionPublishers',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"collectionUpdateFee"`.
 */
export function useDatabaseCollectionUpdateFee<
  TFunctionName extends 'collectionUpdateFee',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'collectionUpdateFee',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"docCreationFee"`.
 */
export function useDatabaseDocCreationFee<
  TFunctionName extends 'docCreationFee',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'docCreationFee',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"documentUpdateFee"`.
 */
export function useDatabaseDocumentUpdateFee<
  TFunctionName extends 'documentUpdateFee',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'documentUpdateFee',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"feeCollectorAddress"`.
 */
export function useDatabaseFeeCollectorAddress<
  TFunctionName extends 'feeCollectorAddress',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'feeCollectorAddress',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"getFees"`.
 */
export function useDatabaseGetFees<
  TFunctionName extends 'getFees',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'getFees',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"isCollectionPublisher"`.
 */
export function useDatabaseIsCollectionPublisher<
  TFunctionName extends 'isCollectionPublisher',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'isCollectionPublisher',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"isDocumentUpdator"`.
 */
export function useDatabaseIsDocumentUpdator<
  TFunctionName extends 'isDocumentUpdator',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'isDocumentUpdator',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"isOrgAdmin"`.
 */
export function useDatabaseIsOrgAdmin<
  TFunctionName extends 'isOrgAdmin',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'isOrgAdmin',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"orgAdmins"`.
 */
export function useDatabaseOrgAdmins<
  TFunctionName extends 'orgAdmins',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'orgAdmins',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"orgCreationFee"`.
 */
export function useDatabaseOrgCreationFee<
  TFunctionName extends 'orgCreationFee',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'orgCreationFee',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"orgUpdateFee"`.
 */
export function useDatabaseOrgUpdateFee<
  TFunctionName extends 'orgUpdateFee',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'orgUpdateFee',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"owner"`.
 */
export function useDatabaseOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof databaseABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'owner',
    ...config
  } as UseContractReadConfig<typeof databaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__.
 */
export function useDatabaseWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof databaseABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, TFunctionName, TMode>({
    abi: databaseABI,
    address: databaseAddress,
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeAllFees"`.
 */
export function useDatabaseChangeAllFees<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeAllFees'
        >['request']['abi'],
        'changeAllFees',
        TMode
      > & { functionName?: 'changeAllFees' }
    : UseContractWriteConfig<typeof databaseABI, 'changeAllFees', TMode> & {
        abi?: never
        functionName?: 'changeAllFees'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'changeAllFees', TMode>({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeAllFees',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeCollectionCreationFee"`.
 */
export function useDatabaseChangeCollectionCreationFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeCollectionCreationFee'
        >['request']['abi'],
        'changeCollectionCreationFee',
        TMode
      > & { functionName?: 'changeCollectionCreationFee' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'changeCollectionCreationFee',
        TMode
      > & {
        abi?: never
        functionName?: 'changeCollectionCreationFee'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'changeCollectionCreationFee',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeCollectionCreationFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeCollectionUpdateFee"`.
 */
export function useDatabaseChangeCollectionUpdateFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeCollectionUpdateFee'
        >['request']['abi'],
        'changeCollectionUpdateFee',
        TMode
      > & { functionName?: 'changeCollectionUpdateFee' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'changeCollectionUpdateFee',
        TMode
      > & {
        abi?: never
        functionName?: 'changeCollectionUpdateFee'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'changeCollectionUpdateFee',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeCollectionUpdateFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeDocumentCreationFee"`.
 */
export function useDatabaseChangeDocumentCreationFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeDocumentCreationFee'
        >['request']['abi'],
        'changeDocumentCreationFee',
        TMode
      > & { functionName?: 'changeDocumentCreationFee' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'changeDocumentCreationFee',
        TMode
      > & {
        abi?: never
        functionName?: 'changeDocumentCreationFee'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'changeDocumentCreationFee',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeDocumentCreationFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeDocumentUpdateFee"`.
 */
export function useDatabaseChangeDocumentUpdateFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeDocumentUpdateFee'
        >['request']['abi'],
        'changeDocumentUpdateFee',
        TMode
      > & { functionName?: 'changeDocumentUpdateFee' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'changeDocumentUpdateFee',
        TMode
      > & {
        abi?: never
        functionName?: 'changeDocumentUpdateFee'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'changeDocumentUpdateFee', TMode>(
    {
      abi: databaseABI,
      address: databaseAddress,
      functionName: 'changeDocumentUpdateFee',
      ...config
    } as any
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeFeeCollectorAddress"`.
 */
export function useDatabaseChangeFeeCollectorAddress<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeFeeCollectorAddress'
        >['request']['abi'],
        'changeFeeCollectorAddress',
        TMode
      > & { functionName?: 'changeFeeCollectorAddress' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'changeFeeCollectorAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'changeFeeCollectorAddress'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'changeFeeCollectorAddress',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeFeeCollectorAddress',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeOrgCreationFee"`.
 */
export function useDatabaseChangeOrgCreationFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeOrgCreationFee'
        >['request']['abi'],
        'changeOrgCreationFee',
        TMode
      > & { functionName?: 'changeOrgCreationFee' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'changeOrgCreationFee',
        TMode
      > & {
        abi?: never
        functionName?: 'changeOrgCreationFee'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'changeOrgCreationFee', TMode>({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeOrgCreationFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeOrgUpdateFee"`.
 */
export function useDatabaseChangeOrgUpdateFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'changeOrgUpdateFee'
        >['request']['abi'],
        'changeOrgUpdateFee',
        TMode
      > & { functionName?: 'changeOrgUpdateFee' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'changeOrgUpdateFee',
        TMode
      > & {
        abi?: never
        functionName?: 'changeOrgUpdateFee'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'changeOrgUpdateFee', TMode>({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeOrgUpdateFee',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"createOrUpdateCollection"`.
 */
export function useDatabaseCreateOrUpdateCollection<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'createOrUpdateCollection'
        >['request']['abi'],
        'createOrUpdateCollection',
        TMode
      > & { functionName?: 'createOrUpdateCollection' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'createOrUpdateCollection',
        TMode
      > & {
        abi?: never
        functionName?: 'createOrUpdateCollection'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'createOrUpdateCollection',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'createOrUpdateCollection',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"createOrUpdateOrganisation"`.
 */
export function useDatabaseCreateOrUpdateOrganisation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'createOrUpdateOrganisation'
        >['request']['abi'],
        'createOrUpdateOrganisation',
        TMode
      > & { functionName?: 'createOrUpdateOrganisation' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'createOrUpdateOrganisation',
        TMode
      > & {
        abi?: never
        functionName?: 'createOrUpdateOrganisation'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'createOrUpdateOrganisation',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'createOrUpdateOrganisation',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"createOrganisationAndCollectionAndAddRoles"`.
 */
export function useDatabaseCreateOrganisationAndCollectionAndAddRoles<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'createOrganisationAndCollectionAndAddRoles'
        >['request']['abi'],
        'createOrganisationAndCollectionAndAddRoles',
        TMode
      > & { functionName?: 'createOrganisationAndCollectionAndAddRoles' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'createOrganisationAndCollectionAndAddRoles',
        TMode
      > & {
        abi?: never
        functionName?: 'createOrganisationAndCollectionAndAddRoles'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'createOrganisationAndCollectionAndAddRoles',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'createOrganisationAndCollectionAndAddRoles',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"publishOrUpdateDocument"`.
 */
export function useDatabasePublishOrUpdateDocument<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'publishOrUpdateDocument'
        >['request']['abi'],
        'publishOrUpdateDocument',
        TMode
      > & { functionName?: 'publishOrUpdateDocument' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'publishOrUpdateDocument',
        TMode
      > & {
        abi?: never
        functionName?: 'publishOrUpdateDocument'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'publishOrUpdateDocument', TMode>(
    {
      abi: databaseABI,
      address: databaseAddress,
      functionName: 'publishOrUpdateDocument',
      ...config
    } as any
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDatabaseRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof databaseABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'renounceOwnership', TMode>({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'renounceOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDatabaseTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof databaseABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'transferOwnership', TMode>({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'transferOwnership',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"updateCollectionPublishers"`.
 */
export function useDatabaseUpdateCollectionPublishers<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'updateCollectionPublishers'
        >['request']['abi'],
        'updateCollectionPublishers',
        TMode
      > & { functionName?: 'updateCollectionPublishers' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'updateCollectionPublishers',
        TMode
      > & {
        abi?: never
        functionName?: 'updateCollectionPublishers'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'updateCollectionPublishers',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'updateCollectionPublishers',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"updateDocumentUpdatorRole"`.
 */
export function useDatabaseUpdateDocumentUpdatorRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'updateDocumentUpdatorRole'
        >['request']['abi'],
        'updateDocumentUpdatorRole',
        TMode
      > & { functionName?: 'updateDocumentUpdatorRole' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'updateDocumentUpdatorRole',
        TMode
      > & {
        abi?: never
        functionName?: 'updateDocumentUpdatorRole'
      } = {} as any
) {
  return useContractWrite<
    typeof databaseABI,
    'updateDocumentUpdatorRole',
    TMode
  >({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'updateDocumentUpdatorRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"updateOrgAdminRole"`.
 */
export function useDatabaseUpdateOrgAdminRole<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof databaseABI,
          'updateOrgAdminRole'
        >['request']['abi'],
        'updateOrgAdminRole',
        TMode
      > & { functionName?: 'updateOrgAdminRole' }
    : UseContractWriteConfig<
        typeof databaseABI,
        'updateOrgAdminRole',
        TMode
      > & {
        abi?: never
        functionName?: 'updateOrgAdminRole'
      } = {} as any
) {
  return useContractWrite<typeof databaseABI, 'updateOrgAdminRole', TMode>({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'updateOrgAdminRole',
    ...config
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__.
 */
export function usePrepareDatabaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof databaseABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeAllFees"`.
 */
export function usePrepareDatabaseChangeAllFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof databaseABI, 'changeAllFees'>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeAllFees',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeAllFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeCollectionCreationFee"`.
 */
export function usePrepareDatabaseChangeCollectionCreationFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'changeCollectionCreationFee'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeCollectionCreationFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeCollectionCreationFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeCollectionUpdateFee"`.
 */
export function usePrepareDatabaseChangeCollectionUpdateFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'changeCollectionUpdateFee'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeCollectionUpdateFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeCollectionUpdateFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeDocumentCreationFee"`.
 */
export function usePrepareDatabaseChangeDocumentCreationFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'changeDocumentCreationFee'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeDocumentCreationFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeDocumentCreationFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeDocumentUpdateFee"`.
 */
export function usePrepareDatabaseChangeDocumentUpdateFee(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'changeDocumentUpdateFee'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeDocumentUpdateFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeDocumentUpdateFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeFeeCollectorAddress"`.
 */
export function usePrepareDatabaseChangeFeeCollectorAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'changeFeeCollectorAddress'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeFeeCollectorAddress',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeFeeCollectorAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeOrgCreationFee"`.
 */
export function usePrepareDatabaseChangeOrgCreationFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof databaseABI, 'changeOrgCreationFee'>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeOrgCreationFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeOrgCreationFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"changeOrgUpdateFee"`.
 */
export function usePrepareDatabaseChangeOrgUpdateFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof databaseABI, 'changeOrgUpdateFee'>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'changeOrgUpdateFee',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'changeOrgUpdateFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"createOrUpdateCollection"`.
 */
export function usePrepareDatabaseCreateOrUpdateCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'createOrUpdateCollection'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'createOrUpdateCollection',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'createOrUpdateCollection'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"createOrUpdateOrganisation"`.
 */
export function usePrepareDatabaseCreateOrUpdateOrganisation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'createOrUpdateOrganisation'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'createOrUpdateOrganisation',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'createOrUpdateOrganisation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"createOrganisationAndCollectionAndAddRoles"`.
 */
export function usePrepareDatabaseCreateOrganisationAndCollectionAndAddRoles(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'createOrganisationAndCollectionAndAddRoles'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'createOrganisationAndCollectionAndAddRoles',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'createOrganisationAndCollectionAndAddRoles'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"publishOrUpdateDocument"`.
 */
export function usePrepareDatabasePublishOrUpdateDocument(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'publishOrUpdateDocument'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'publishOrUpdateDocument',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'publishOrUpdateDocument'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDatabaseRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof databaseABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'renounceOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDatabaseTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof databaseABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'transferOwnership',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"updateCollectionPublishers"`.
 */
export function usePrepareDatabaseUpdateCollectionPublishers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'updateCollectionPublishers'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'updateCollectionPublishers',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'updateCollectionPublishers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"updateDocumentUpdatorRole"`.
 */
export function usePrepareDatabaseUpdateDocumentUpdatorRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof databaseABI,
      'updateDocumentUpdatorRole'
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'updateDocumentUpdatorRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'updateDocumentUpdatorRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link databaseABI}__ and `functionName` set to `"updateOrgAdminRole"`.
 */
export function usePrepareDatabaseUpdateOrgAdminRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof databaseABI, 'updateOrgAdminRole'>,
    'abi' | 'address' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: databaseABI,
    address: databaseAddress,
    functionName: 'updateOrgAdminRole',
    ...config
  } as UsePrepareContractWriteConfig<typeof databaseABI, 'updateOrgAdminRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__.
 */
export function useDatabaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, TEventName>,
    'abi' | 'address'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    ...config
  } as UseContractEventConfig<typeof databaseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"CollectionCreatedOrUpdated"`.
 */
export function useDatabaseCollectionCreatedOrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'CollectionCreatedOrUpdated'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'CollectionCreatedOrUpdated',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'CollectionCreatedOrUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"DocumentCreatedOrUpdated"`.
 */
export function useDatabaseDocumentCreatedOrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'DocumentCreatedOrUpdated'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'DocumentCreatedOrUpdated',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'DocumentCreatedOrUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"FeeCollectorAddressUpdated"`.
 */
export function useDatabaseFeeCollectorAddressUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'FeeCollectorAddressUpdated'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'FeeCollectorAddressUpdated',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'FeeCollectorAddressUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"OrganisationCreatedOrUpdated"`.
 */
export function useDatabaseOrganisationCreatedOrUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'OrganisationCreatedOrUpdated'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'OrganisationCreatedOrUpdated',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'OrganisationCreatedOrUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDatabaseOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'OwnershipTransferred',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"collectionCreationFeeChanged"`.
 */
export function useDatabaseCollectionCreationFeeChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'collectionCreationFeeChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'collectionCreationFeeChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'collectionCreationFeeChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"collectionPublisherChanged"`.
 */
export function useDatabaseCollectionPublisherChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'collectionPublisherChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'collectionPublisherChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'collectionPublisherChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"collectionUpdateFeeChanged"`.
 */
export function useDatabaseCollectionUpdateFeeChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'collectionUpdateFeeChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'collectionUpdateFeeChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'collectionUpdateFeeChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"documentCreationFeeChanged"`.
 */
export function useDatabaseDocumentCreationFeeChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'documentCreationFeeChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'documentCreationFeeChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'documentCreationFeeChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"documentUpdateFeeChanged"`.
 */
export function useDatabaseDocumentUpdateFeeChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'documentUpdateFeeChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'documentUpdateFeeChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'documentUpdateFeeChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"documentUpdatorChanged"`.
 */
export function useDatabaseDocumentUpdatorChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'documentUpdatorChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'documentUpdatorChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'documentUpdatorChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"orgAdminChanged"`.
 */
export function useDatabaseOrgAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'orgAdminChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'orgAdminChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'orgAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"orgCreationFeeChanged"`.
 */
export function useDatabaseOrgCreationFeeChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'orgCreationFeeChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'orgCreationFeeChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'orgCreationFeeChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link databaseABI}__ and `eventName` set to `"orgUpdateFeeChanged"`.
 */
export function useDatabaseOrgUpdateFeeChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof databaseABI, 'orgUpdateFeeChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: databaseABI,
    address: databaseAddress,
    eventName: 'orgUpdateFeeChanged',
    ...config
  } as UseContractEventConfig<typeof databaseABI, 'orgUpdateFeeChanged'>)
}
